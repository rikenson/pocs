import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import software.amazon.awssdk.services.sqs.SqsClient;
import software.amazon.awssdk.services.sqs.model.*;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class SqsConsumerServiceTest {

    @Mock
    private SqsClient sqsClient;

    @InjectMocks
    private SqsConsumerService sqsConsumerService;

    @BeforeEach
    void setUp() {
        // Simulate empty SQS response initially
        Mockito.when(sqsClient.receiveMessage(any(ReceiveMessageRequest.class)))
                .thenReturn(ReceiveMessageResponse.builder().messages(Collections.emptyList()).build());
    }

    @Test
    void shouldProcessMessageSuccessfully() throws InterruptedException {
        // ✅ Simulate a valid message
        Message mockMessage = Message.builder()
                .body("Hello SQS!")
                .receiptHandle("receipt-handle-123")
                .build();

        Mockito.when(sqsClient.receiveMessage(any(ReceiveMessageRequest.class)))
                .thenReturn(ReceiveMessageResponse.builder().messages(List.of(mockMessage)).build());

        // ✅ Run polling in a separate thread
        Thread pollingThread = new Thread(() -> sqsConsumerService.pollQueue());
        pollingThread.start();

        // Wait a bit to let the message be processed
        TimeUnit.SECONDS.sleep(3);

        // ✅ Stop the polling
        sqsConsumerService.stopListening();
        pollingThread.join();

        // ✅ Verify that the message was processed and deleted
        verify(sqsClient, times(1)).deleteMessage(any(DeleteMessageRequest.class));
    }

    @Test
    void shouldRetryOnFailureAndNotDeleteMessage() throws InterruptedException {
        // ❌ Simulate a failing message
        Message mockMessage = Message.builder()
                .body("fail")  // This will cause processMessage() to throw an error
                .receiptHandle("receipt-handle-456")
                .build();

        Mockito.when(sqsClient.receiveMessage(any(ReceiveMessageRequest.class)))
                .thenReturn(ReceiveMessageResponse.builder().messages(List.of(mockMessage)).build());

        // ✅ Run polling in a separate thread
        Thread pollingThread = new Thread(() -> sqsConsumerService.pollQueue());
        pollingThread.start();

        // Wait to allow the retry logic to trigger
        TimeUnit.SECONDS.sleep(6);

        // ✅ Stop the polling
        sqsConsumerService.stopListening();
        pollingThread.join();

        // ❌ Verify that deleteMessage() was **never** called (since the message failed)
        verify(sqsClient, never()).deleteMessage(any(DeleteMessageRequest.class));
    }
}
