openapi: 3.0.0
servers:
  - url: 'http://localhost:4000'
    description: Server description
info:
  title: sample-management-rest
  version: 1.0.0
  description: Sample Management service
  contact:
    email: infos-dev@mendoz.labs
  license:
    name: SBT 1.0
    url: 'https://www.licence.mendoz.labs'
tags:
  - name: sample-endpoints
    description: Samples management operations
  - name: graph-sample-endpoints
    description: Graph samples management operations
  - name: aws-params-endpoints
    description: AWS Parameter management operations
paths:
  /samples:
    post:
      tags:
        - sample-endpoints
      summary: Register new sample.
      operationId: addSample
      description: Add a brand new sample
      parameters:
        - $ref: '#/components/parameters/token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleRequest'
      responses:
        '201':
          description: Item created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleResponse'
    get:
      tags:
        - sample-endpoints
      summary: Fetch pages of samples filtered by criteria.
      operationId: searchSamples
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/preferredField'
        - $ref: '#/components/parameters/startDateTime'
        - $ref: '#/components/parameters/endDateTime'
      responses:
        '200':
          description: Found item structure.
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SampleResponse"
  '/samples/{id}':
    put:
      tags:
        - sample-endpoints
      summary: Update a specific sample by id.
      operationId: updateSample
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedSampleRequest'
      responses:
        '200':
          description: Found item structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleResponse'
    delete:
      tags:
        - sample-endpoints
      summary: Delete a specific sample by id.
      operationId: deleteSample
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/200APIMessage'
    patch:
      tags:
        - sample-endpoints
      summary: patch to sample by id.
      operationId: patchSample
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSampleRequest'
      responses:
        '200':
          description: Found item structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleResponse'
    get:
      tags:
        - sample-endpoints
      summary: Fetch a specific sample.
      operationId: searchCurrentSample
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Found item by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleResponse'
  /graph-samples:
    post:
      tags:
        - graph-sample-endpoints
      summary: Register new sample.
      operationId: addGraphSample
      description: Add a brand new sample
      parameters:
        - $ref: '#/components/parameters/token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleRequest'
      responses:
        '201':
          description: Item created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleResponse'
    get:
      tags:
        - graph-sample-endpoints
      summary: Fetch pages of samples filtered by criteria.
      operationId: searchGraphSamples
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/preferredField'
        - $ref: '#/components/parameters/startDateTime'
        - $ref: '#/components/parameters/endDateTime'
      responses:
        '200':
          description: Found item structure.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SampleResponse'
  '/graph-samples/{id}':
    put:
      tags:
        - graph-sample-endpoints
      summary: Update a specific sample by id.
      operationId: updateGraphSample
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedSampleRequest'
      responses:
        '200':
          description: Found item structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleResponse'
    delete:
      tags:
        - graph-sample-endpoints
      summary: Delete a specific sample by id.
      operationId: deleteGraphSample
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/200APIMessage'
    patch:
      tags:
        - graph-sample-endpoints
      summary: patch to sample by id.
      operationId: patchGraphSample
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchedSampleRequest'
      responses:
        '200':
          description: Found item structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleResponse'
    get:
      tags:
        - graph-sample-endpoints
      summary: Fetch a specific sample.
      operationId: searchGraphCurrentSample
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Found item by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleResponse'
  /aws-parameters:
    post:
      tags:
        - param-endpoints
      summary: Register new param.
      operationId: addParam
      description: Add a brand new param
      parameters:
        - $ref: '#/components/parameters/token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParamRequest'
      responses:
        '201':
          description: Item created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParamResponse'
  '/aws-parameters/{key}':
    get:
      tags:
        - aws-params-endpoints
      summary: Fetch a specific sample.
      operationId: getParamByKey
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/key'
      responses:
        '200':
          description: Found item by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParamResponse'
  /aws-parameters/path:
    get:
      tags:
        - aws-params-endpoints
      summary: Fetch a specific sample.
      operationId: getParamByPath
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/path'
      responses:
        '200':
          description: Found item by id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParamResponse'
components:
  securitySchemes:
    implicit:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://localhost/oauth/auth'
          scopes:
            write: allows modifying resources
            read: allows reading resources
  parameters:
    startDateTime:
      in: query
      name: startDateTime
      description: Fields to consider to filter by start datetime.
      required: false
      schema:
        type: string
        format: date-time
        example: 2017-07-21T17:32:28.000Z
    endDateTime:
      in: query
      name: endDateTime
      description: Fields to consider to filter by ended datetime.
      required: false
      schema:
        type: string
        format: date-time
        example: 2017-07-21T17:32:28.000Z
    preferredField:
      in: query
      name: preferredField
      description: Fields to consider to order the elements.
      required: false
      schema:
        type: string
        example: id
        default: id
    status:
      in: query
      name: status
      description: Fields to consider status.
      required: false
      schema:
        type: string
        default: PENDING
        enum:
          - ENDED
          - STARTED
          - CANCELED
          - PENDING
    id:
      in: path
      name: id
      description: Current entity ID.
      required: true
      schema:
        type: string
        format: uuid
        example: d815d301-8bae-4dd0-a292-56e0cb7509d6
    token:
      in: header
      name: token
      description: security token
      required: true
      schema:
        type: string
        example: 283jebuiVIVEG&#G#UGFXVVWWVD#h3dndon3j0d1hd119hd&ywyw^YS
    key:
      in: path
      name: key
      description: Current key.
      required: true
      schema:
        type: string
        example: key
    path:
      in: query
      name: path
      description: Current path.
      required: true
      schema:
        type: string
        example: path
  schemas:
    Param:
      type: object
      properties:
        name:
          type: string
          example: /config/pocs/message
        value:
          type: string
          example: Integration SSM Parameter Service Spring Boot
        type:
          type: string
          example: String
        version:
          type: integer
          example: 1
        lastModifiedDate:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
    ParamRequest:
      allOf:
        - $ref: '#/components/schemas/Param'
      type: object
      required:
        - name
        - value
        - type
    ParamResponse:
      allOf:
        - $ref: '#/components/schemas/Audit'
        - $ref: '#/components/schemas/ParamRequest'
      type: object
      properties:
        lastModifiedDate:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
    Sample:
      type: object
      properties:
        name:
          type: string
          example: Unit Testing
        description:
          type: string
          example: Sample sur la mise en place des test unitaires...
        status:
          type: string
          default: PENDING
          enum:
            - ENDED
            - STARTED
            - CANCELED
            - PENDING
        startDateTime:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        endDateTime:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
    SampleRequest:
      allOf:
        - $ref: '#/components/schemas/Sample'
      type: object
      required:
        - name
        - description
        - startDateTime
        - endDateTime
        - status
    PatchedSampleRequest:
      allOf:
        - $ref: '#/components/schemas/Sample'
      type: object
    UpdatedSampleRequest:
      allOf:
        - $ref: '#/components/schemas/Audit'
        - $ref: '#/components/schemas/SampleRequest'
      type: object
    SampleResponse:
      allOf:
        - $ref: '#/components/schemas/Audit'
        - $ref: '#/components/schemas/SampleRequest'
      type: object
    Identity:
      type: object
      required:
        - uuid
      properties:
        uuid:
          type: string
          uniqueItems: true
          example: d815d301-8bae-4dd0-a292-56e0cb7509d6
    Audit:
      allOf:
        - $ref: '#/components/schemas/Identity'
      type: object
      required:
        - version
        - createdAt
        - createdBy
      properties:
        version:
          type: integer
          example: 0
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        createdBy:
          type: string
          uniqueItems: true
          example: d815d301-8bae-4dd0-a292-56e0cb7509d6
        modifiedBy:
          type: string
          uniqueItems: true
          example: d815d301-8bae-4dd0-a292-56e0cb7509d6
  responses:
    200APIMessage:
      description: Operation done successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: string
                example: 200
              message:
                type: string
                example: Operation done successfully.
